version: '3.4'


# You can replace the variables here or in an .env file
x-web-environment:
  &web-environment
  environment:
    - LOCAL_DOMAIN=${LOCAL_DOMAIN:-toot.domain.tld}
    - REDIS_HOST=${REDIS_HOST:-redis}
    - REDIS_PORT=${REDIS_PORT:-6379}
    - DB_HOST=${DB_HOST:-db}
    - DB_USER=${DB_USER:-mastodon}
    - DB_NAME=${DB_NAME:-mastodon_db}
    - DB_PORT=${DB_PORT:-5432}
    - DB_PASS=${DB_PASS:-password}
    - ES_ENABLED=${ES_ENABLED:-true}
    - ES_HOST=${ES_HOST:-es}
    - ES_PORT=${ES_PORT:-9200}
    - ES_USER=${ES_USER:-elastic}
    - ES_PASS=${ES_PASS:-password}
    - SECRET_KEY_BASE=${SECRET_KEY_BASE:-"bundle exec rake secret"}
    - OTP_SECRET=${OTP_SECRET:-"bundle exec rake secret"}
    - PAPERCLIP_SECRET=${PAPERCLIP_SECRET:-"bundle exec rake secret"}
    - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY:-"bundle exec rake mastodon:webpush:generate_vapid_key"}
    - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY:-"bundle exec rake mastodon:webpush:generate_vapid_key"}
    - SMTP_SERVER=${SMTP_SERVER:-mail.domain.tld}
    - SMTP_PORT=${SMTP_PORT:-587}
    - SMTP_LOGIN=${SMTP_LOGIN:-user}
    - SMTP_PASSWORD=${SMTP_PASSWORD:-password}
    - SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS:-toot@toot.domain.tld}
    - S3_ENABLED=${S3_ENABLED:-false}
    - S3_BUCKET=${S3_BUCKET:-files.domain.tld}
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-nokey}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-nokey}
    - S3_ALIAS_HOST=${S3_ALIAS_HOST:-files.domain.tld}
    - IP_RETENTION_PERIOD=${IP_RETENTION_PERIOD:-31556952}
    - SESSION_RETENTION_PERIOD=${SESSION_RETENTION_PERIOD:-31556952}
    - RAILS_SERVE_STATIC_FILES=${RAILS_SERVE_STATIC_FILES:-enabled}

services:

  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 256mb
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
    volumes:
      - pgsql:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}

  redis:
    restart: always
    image: redis:7
    networks:
      - internal_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    volumes:
      - redis:/data
    expose:
      - 6379

  es:
    restart: always
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Des.enforce.bootstrap.checks=true"
      - "xpack.license.self_generated.type=basic"
      - "xpack.security.enabled=false"
      - "xpack.watcher.enabled=false"
      - "xpack.graph.enabled=false"
      - "xpack.ml.enabled=false"
      - "bootstrap.memory_lock=true"
      - "cluster.name=es-mastodon"
      - "discovery.type=single-node"
      - "thread_pool.write.queue_size=1000"
    networks:
       - external_network
       - internal_network
    healthcheck:
       test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
    volumes:
       - elasticsearch:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - '9200:9200'

  web:
    build: .
    image: tootsuite/mastodon
    restart: always
    <<: *web-environment
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    # use this entrypoint to start a dormant containter. Useful to execute the installation steps.
    #entrypoint: tail -f /dev/null
    networks:
      - external_network
      - internal_network
    healthcheck:
    # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    ports:
      - '3000:3000'
    depends_on:
      - db
      - redis
      # - es
    volumes:
      - public-system:/mastodon/public/system

  streaming:
    build: .
    image: tootsuite/mastodon
    restart: always
    <<: *web-environment
    command: node ./streaming
    networks:
      - external_network
      - internal_network
    healthcheck:
    # prettier-ignore
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    ports:
      - '127.0.0.1:4000:4000'
    depends_on:
      - db
      - redis

  sidekiq:
    build: .
    image: tootsuite/mastodon
    restart: always
    <<: *web-environment

    command: bundle exec sidekiq
    depends_on:
      - db
      - redis
    networks:
      - external_network
      - internal_network
    volumes:
      - public-system:/mastodon/public/system
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]


  ## Uncomment to enable federation with tor instances along with adding the following ENV variables
  ## http_proxy=http://privoxy:8118
  ## ALLOW_ACCESS_TO_HIDDEN_SERVICE=true
  # tor:
  #   image: sirboops/tor
  #   networks:
  #      - external_network
  #      - internal_network
  #
  # privoxy:
  #   image: sirboops/privoxy
  #   volumes:
  #     - ./priv-config:/opt/config
  #   networks:
  #     - external_network
  #     - internal_network


volumes:
  pgsql:
  redis:
  elasticsearch:
  public-system:


networks:
  external_network:
  internal_network:
    internal: true
